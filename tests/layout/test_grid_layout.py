#!/usr/bin/env python3
"""
Test para verificar el layout de cuadr√≠cula en Resource Groups con muchos recursos
"""

import sys
import os
from pathlib import Path

# Agregar src al path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from drawio_export import generate_drawio_file

def test_resource_group_grid_layout():
    """Test del layout de cuadr√≠cula para RGs con muchos recursos"""
    
    # Datos de prueba con un RG que tiene muchos recursos
    test_items = [
        # Management Group
        {
            'id': '/providers/Microsoft.Management/managementGroups/mg-test',
            'name': 'Test Management Group',
            'type': 'Microsoft.Management/managementGroups'
        },
        # Suscripci√≥n
        {
            'id': '/subscriptions/sub-test',
            'name': 'Test Subscription',
            'type': 'Microsoft.Resources/subscriptions'
        },
        # Resource Group con muchos recursos
        {
            'id': '/subscriptions/sub-test/resourceGroups/rg-many-resources',
            'name': 'rg-many-resources',
            'type': 'Microsoft.Resources/subscriptions/resourceGroups'
        }
    ]
    
    # Agregar 12 recursos diferentes al Resource Group para probar la cuadr√≠cula
    resource_types = [
        ('vm-web-01', 'Microsoft.Compute/virtualMachines'),
        ('vm-web-02', 'Microsoft.Compute/virtualMachines'),
        ('vm-api-01', 'Microsoft.Compute/virtualMachines'),
        ('vm-api-02', 'Microsoft.Compute/virtualMachines'),
        ('st-storage01', 'Microsoft.Storage/storageAccounts'),
        ('st-storage02', 'Microsoft.Storage/storageAccounts'),
        ('vnet-main', 'Microsoft.Network/virtualNetworks'),
        ('nsg-web', 'Microsoft.Network/networkSecurityGroups'),
        ('nsg-api', 'Microsoft.Network/networkSecurityGroups'),
        ('lb-internal', 'Microsoft.Network/loadBalancers'),
        ('pip-gateway', 'Microsoft.Network/publicIPAddresses'),
        ('kv-secrets', 'Microsoft.KeyVault/vaults')
    ]
    
    for i, (name, resource_type) in enumerate(resource_types):
        test_items.append({
            'id': f'/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/{resource_type}/{name}',
            'name': name,
            'type': resource_type,
            'resourceGroup': 'rg-many-resources',
            'subscriptionId': 'sub-test'
        })
    
    # Dependencias jer√°rquicas
    test_dependencies = [
        # Jerarqu√≠a b√°sica
        ('/subscriptions/sub-test', '/providers/Microsoft.Management/managementGroups/mg-test'),
        ('/subscriptions/sub-test/resourceGroups/rg-many-resources', '/subscriptions/sub-test'),
    ]
    
    # Conectar todos los recursos al Resource Group
    for name, resource_type in resource_types:
        resource_id = f'/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/{resource_type}/{name}'
        test_dependencies.append((resource_id, '/subscriptions/sub-test/resourceGroups/rg-many-resources'))
    
    # Agregar algunas dependencias de relaci√≥n entre recursos
    test_dependencies.extend([
        # VMs ‚Üí Storage
        ('/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Storage/storageAccounts/st-storage01',
         '/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Compute/virtualMachines/vm-web-01'),
        ('/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Storage/storageAccounts/st-storage02',
         '/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Compute/virtualMachines/vm-api-01'),
        
        # VMs ‚Üí VNet
        ('/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Compute/virtualMachines/vm-web-01',
         '/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Network/virtualNetworks/vnet-main'),
        ('/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Compute/virtualMachines/vm-api-01',
         '/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Network/virtualNetworks/vnet-main'),
        
        # NSGs ‚Üí VNet
        ('/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Network/networkSecurityGroups/nsg-web',
         '/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Network/virtualNetworks/vnet-main'),
        ('/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Network/networkSecurityGroups/nsg-api',
         '/subscriptions/sub-test/resourceGroups/rg-many-resources/providers/Microsoft.Network/virtualNetworks/vnet-main')
    ])
    
    print("üß™ Probando layout de cuadr√≠cula para Resource Group con muchos recursos...")
    print(f"üìä Resource Group: 1 con {len(resource_types)} recursos")
    print(f"üîó Dependencias: {len(test_dependencies)} relaciones")
    print(f"üìê Expectativa: Recursos organizados en cuadr√≠cula (m√°x 6 por fila)")
    
    content = generate_drawio_file(
        test_items, 
        test_dependencies, 
        embed_data=False,
        include_ids=None,
        diagram_mode='infrastructure'
    )
    
    # Verificaciones
    assert content is not None, "No se gener√≥ contenido"
    assert len(content) > 2000, "El contenido es demasiado corto"
    
    # Verificar que se gener√≥ la estructura
    assert 'Test Management Group' in content, "No se encontr√≥ el Management Group"
    assert 'Test Subscription' in content, "No se encontr√≥ la suscripci√≥n"
    assert 'rg-many-resources' in content, "No se encontr√≥ el Resource Group"
    
    # Verificar algunos recursos
    assert 'vm-web-01' in content, "No se encontr√≥ VM web 1"
    assert 'st-storage01' in content, "No se encontr√≥ Storage 1"
    assert 'vnet-main' in content, "No se encontr√≥ VNet"
    assert 'kv-secrets' in content, "No se encontr√≥ Key Vault"
    
    # Verificar tipos de l√≠neas
    assert 'strokeColor=#1976d2;strokeWidth=2;' in content, "No se encontraron l√≠neas jer√°rquicas"
    assert 'dashed=1;' in content, "No se encontraron l√≠neas de relaci√≥n"
    
    # Guardar archivo de prueba
    output_file = 'test-grid-layout.drawio'
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Test de layout de cuadr√≠cula completado exitosamente")
    print(f"üìÅ Archivo generado: {output_file}")
    print(f"üìê Los 12 recursos dentro del RG deben estar organizados en cuadr√≠cula")
    print(f"   ‚Ä¢ M√°ximo 6 recursos por fila")
    print(f"   ‚Ä¢ 2 filas con los recursos distribuidos")
    print(f"   ‚Ä¢ Resource Group centrado arriba")

def test_mixed_layout_scenarios():
    """Test de escenarios mixtos: algunos RGs con pocos recursos, otros con muchos"""
    
    test_items = [
        # Management Group
        {
            'id': '/providers/Microsoft.Management/managementGroups/mg-mixed',
            'name': 'Mixed Layout Test',
            'type': 'Microsoft.Management/managementGroups'
        },
        # Suscripci√≥n
        {
            'id': '/subscriptions/sub-mixed',
            'name': 'Mixed Subscription',
            'type': 'Microsoft.Resources/subscriptions'
        },
        # RG con pocos recursos (layout lineal)
        {
            'id': '/subscriptions/sub-mixed/resourceGroups/rg-few-resources',
            'name': 'rg-few-resources',
            'type': 'Microsoft.Resources/subscriptions/resourceGroups'
        },
        # RG con muchos recursos (layout de cuadr√≠cula)
        {
            'id': '/subscriptions/sub-mixed/resourceGroups/rg-many-resources',
            'name': 'rg-many-resources',
            'type': 'Microsoft.Resources/subscriptions/resourceGroups'
        }
    ]
    
    # Pocos recursos en el primer RG (solo 3 - deber√≠a usar layout lineal)
    few_resources = [
        ('vm-simple', 'Microsoft.Compute/virtualMachines'),
        ('st-simple', 'Microsoft.Storage/storageAccounts'),
        ('vnet-simple', 'Microsoft.Network/virtualNetworks')
    ]
    
    for name, resource_type in few_resources:
        test_items.append({
            'id': f'/subscriptions/sub-mixed/resourceGroups/rg-few-resources/providers/{resource_type}/{name}',
            'name': name,
            'type': resource_type,
            'resourceGroup': 'rg-few-resources'
        })
    
    # Muchos recursos en el segundo RG (10 - deber√≠a usar layout de cuadr√≠cula)
    many_resources = [
        ('vm-web-01', 'Microsoft.Compute/virtualMachines'),
        ('vm-web-02', 'Microsoft.Compute/virtualMachines'),
        ('vm-api-01', 'Microsoft.Compute/virtualMachines'),
        ('vm-api-02', 'Microsoft.Compute/virtualMachines'),
        ('vm-db-01', 'Microsoft.Compute/virtualMachines'),
        ('st-data', 'Microsoft.Storage/storageAccounts'),
        ('st-logs', 'Microsoft.Storage/storageAccounts'),
        ('vnet-prod', 'Microsoft.Network/virtualNetworks'),
        ('lb-external', 'Microsoft.Network/loadBalancers'),
        ('kv-prod', 'Microsoft.KeyVault/vaults')
    ]
    
    for name, resource_type in many_resources:
        test_items.append({
            'id': f'/subscriptions/sub-mixed/resourceGroups/rg-many-resources/providers/{resource_type}/{name}',
            'name': name,
            'type': resource_type,
            'resourceGroup': 'rg-many-resources'
        })
    
    # Dependencias jer√°rquicas
    test_dependencies = [
        ('/subscriptions/sub-mixed', '/providers/Microsoft.Management/managementGroups/mg-mixed'),
        ('/subscriptions/sub-mixed/resourceGroups/rg-few-resources', '/subscriptions/sub-mixed'),
        ('/subscriptions/sub-mixed/resourceGroups/rg-many-resources', '/subscriptions/sub-mixed'),
    ]
    
    # Conectar recursos a sus RGs
    for name, resource_type in few_resources:
        resource_id = f'/subscriptions/sub-mixed/resourceGroups/rg-few-resources/providers/{resource_type}/{name}'
        test_dependencies.append((resource_id, '/subscriptions/sub-mixed/resourceGroups/rg-few-resources'))
    
    for name, resource_type in many_resources:
        resource_id = f'/subscriptions/sub-mixed/resourceGroups/rg-many-resources/providers/{resource_type}/{name}'
        test_dependencies.append((resource_id, '/subscriptions/sub-mixed/resourceGroups/rg-many-resources'))
    
    print("\nüß™ Probando escenarios mixtos de layout...")
    print(f"üìä RG pocos recursos: {len(few_resources)} (layout lineal)")
    print(f"üìä RG muchos recursos: {len(many_resources)} (layout cuadr√≠cula)")
    
    content = generate_drawio_file(
        test_items, 
        test_dependencies, 
        embed_data=False,
        include_ids=None,
        diagram_mode='infrastructure'
    )
    
    assert content is not None, "No se gener√≥ contenido"
    
    # Guardar archivo de prueba
    output_file = 'test-mixed-layout.drawio'
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Test de layout mixto completado")
    print(f"üìÅ Archivo generado: {output_file}")
    print(f"üìê Debe mostrar:")
    print(f"   ‚Ä¢ rg-few-resources: 3 recursos en l√≠nea horizontal")
    print(f"   ‚Ä¢ rg-many-resources: 10 recursos en cuadr√≠cula (6+4)")

if __name__ == "__main__":
    try:
        test_resource_group_grid_layout()
        test_mixed_layout_scenarios()
        print("\nüéâ TODOS LOS TESTS DE LAYOUT DE CUADR√çCULA PASARON CORRECTAMENTE")
        print("\nüìã Resumen de mejoras:")
        print("   ‚úÖ Resource Groups con >6 recursos usan layout de cuadr√≠cula")
        print("   ‚úÖ M√°ximo 6 recursos por fila")
        print("   ‚úÖ Filas centradas autom√°ticamente")
        print("   ‚úÖ Resource Group padre posicionado en el centro superior")
        print("   ‚úÖ Compatibilidad con escenarios mixtos")
        print("   ‚úÖ Layout lineal mantenido para RGs con pocos recursos")
    except Exception as e:
        print(f"\n‚ùå ERROR en tests de layout: {e}")
        import traceback
        traceback.print_exc()
        raise
