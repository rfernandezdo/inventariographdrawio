#!/usr/bin/env python3
"""
Test de comparaci√≥n visual: Layout Radial vs otros layouts
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from drawio_export import generate_drawio_file

def test_visual_comparison():
    """Test para comparar visualmente diferentes tipos de layout"""
    
    test_items = [
        # Management Group
        {
            'id': '/providers/Microsoft.Management/managementGroups/mg-comparison',
            'name': 'Layout Comparison Demo',
            'type': 'Microsoft.Management/managementGroups'
        },
        # Suscripci√≥n
        {
            'id': '/subscriptions/sub-comparison',
            'name': 'Comparison Subscription',
            'type': 'Microsoft.Resources/subscriptions'
        },
        # RG con 8 recursos t√≠picos de una aplicaci√≥n web
        {
            'id': '/subscriptions/sub-comparison/resourceGroups/rg-webapp',
            'name': 'rg-webapp-radial',
            'type': 'Microsoft.Resources/subscriptions/resourceGroups'
        }
    ]
    
    # Recursos t√≠picos de una aplicaci√≥n web moderna
    webapp_resources = [
        ('vm-web-01', 'Microsoft.Compute/virtualMachines'),
        ('vm-web-02', 'Microsoft.Compute/virtualMachines'),
        ('vm-api-01', 'Microsoft.Compute/virtualMachines'),
        ('vm-db-01', 'Microsoft.Compute/virtualMachines'),
        ('st-webapp-data', 'Microsoft.Storage/storageAccounts'),
        ('vnet-webapp', 'Microsoft.Network/virtualNetworks'),
        ('lb-frontend', 'Microsoft.Network/loadBalancers'),
        ('kv-webapp-secrets', 'Microsoft.KeyVault/vaults'),
        ('sql-webapp-db', 'Microsoft.Sql/servers'),
        ('appi-webapp-insights', 'Microsoft.Insights/components')
    ]
    
    for name, resource_type in webapp_resources:
        test_items.append({
            'id': f'/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/{resource_type}/{name}',
            'name': name,
            'type': resource_type,
            'resourceGroup': 'rg-webapp'
        })
    
    # Dependencias jer√°rquicas
    test_dependencies = [
        ('/subscriptions/sub-comparison', '/providers/Microsoft.Management/managementGroups/mg-comparison'),
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp', '/subscriptions/sub-comparison'),
    ]
    
    # Conectar todos los recursos al RG
    for name, resource_type in webapp_resources:
        resource_id = f'/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/{resource_type}/{name}'
        test_dependencies.append((resource_id, '/subscriptions/sub-comparison/resourceGroups/rg-webapp'))
    
    # Dependencias de relaci√≥n t√≠picas de una webapp
    test_dependencies.extend([
        # VMs web ‚Üí Load Balancer
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-web-01',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Network/loadBalancers/lb-frontend'),
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-web-02',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Network/loadBalancers/lb-frontend'),
        
        # VMs ‚Üí VNet
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-web-01',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Network/virtualNetworks/vnet-webapp'),
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-api-01',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Network/virtualNetworks/vnet-webapp'),
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-db-01',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Network/virtualNetworks/vnet-webapp'),
        
        # API VM ‚Üí Database
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-api-01',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Sql/servers/sql-webapp-db'),
        
        # VMs ‚Üí Storage
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Storage/storageAccounts/st-webapp-data',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-web-01'),
        
        # App Insights ‚Üí VMs (monitoreo)
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Insights/components/appi-webapp-insights',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-web-01'),
        
        # Key Vault ‚Üí API VM (secrets)
        ('/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.Compute/virtualMachines/vm-api-01',
         '/subscriptions/sub-comparison/resourceGroups/rg-webapp/providers/Microsoft.KeyVault/vaults/kv-webapp-secrets'),
    ])
    
    print("üß™ Generando diagrama de comparaci√≥n con layout radial...")
    print(f"üìä Aplicaci√≥n web t√≠pica: {len(webapp_resources)} recursos")
    print(f"üîÑ Layout radial: recursos dispuestos en c√≠rculo")
    print(f"üí´ Ventajas del layout radial:")
    print(f"   ‚Ä¢ M√°s compacto que layout lineal")
    print(f"   ‚Ä¢ Visualmente atractivo y balanceado")
    print(f"   ‚Ä¢ F√°cil identificaci√≥n del Resource Group central")
    print(f"   ‚Ä¢ Conexiones m√°s cortas y claras")
    
    content = generate_drawio_file(
        test_items, 
        test_dependencies, 
        embed_data=False,
        include_ids=None,
        diagram_mode='infrastructure'
    )
    
    assert content is not None, "No se gener√≥ contenido"
    assert len(content) > 1500, "El contenido es demasiado corto"
    
    # Verificar recursos clave
    assert 'Layout Comparison Demo' in content, "No se encontr√≥ el Management Group"
    assert 'rg-webapp-radial' in content, "No se encontr√≥ el Resource Group"
    assert 'vm-web-01' in content, "No se encontr√≥ VM web 1"
    assert 'sql-webapp-db' in content, "No se encontr√≥ SQL Server"
    assert 'kv-webapp-secrets' in content, "No se encontr√≥ Key Vault"
    assert 'lb-frontend' in content, "No se encontr√≥ Load Balancer"
    
    output_file = 'test-webapp-radial-demo.drawio'
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Diagrama de comparaci√≥n generado exitosamente")
    print(f"üìÅ Archivo generado: {output_file}")
    print(f"üéØ Para ver el resultado:")
    print(f"   1. Abre {output_file} en https://app.diagrams.net")
    print(f"   2. Observa el layout radial del Resource Group")
    print(f"   3. Los 10 recursos est√°n dispuestos en un c√≠rculo perfecto")
    print(f"   4. El RG est√° en el centro, conectado radialmente")

def test_performance_radial():
    """Test de rendimiento con layout radial"""
    
    import time
    
    # Generar estructura con m√∫ltiples RGs con layout radial
    test_items = [
        {
            'id': '/providers/Microsoft.Management/managementGroups/mg-perf',
            'name': 'Performance Test',
            'type': 'Microsoft.Management/managementGroups'
        },
        {
            'id': '/subscriptions/sub-perf',
            'name': 'Performance Subscription',
            'type': 'Microsoft.Resources/subscriptions'
        }
    ]
    
    test_dependencies = [
        ('/subscriptions/sub-perf', '/providers/Microsoft.Management/managementGroups/mg-perf')
    ]
    
    # Crear 5 Resource Groups con diferentes cantidades de recursos
    rg_sizes = [4, 6, 8, 10, 12]  # Todos usar√°n layout radial
    resource_types = [
        'Microsoft.Compute/virtualMachines',
        'Microsoft.Storage/storageAccounts',
        'Microsoft.Network/virtualNetworks',
        'Microsoft.KeyVault/vaults',
        'Microsoft.Sql/servers',
        'Microsoft.Network/loadBalancers',
        'Microsoft.Insights/components',
        'Microsoft.Network/networkSecurityGroups',
        'Microsoft.Compute/disks',
        'Microsoft.Network/publicIPAddresses',
        'Microsoft.Web/sites',
        'Microsoft.DocumentDB/databaseAccounts'
    ]
    
    for rg_num, size in enumerate(rg_sizes):
        rg_id = f'/subscriptions/sub-perf/resourceGroups/rg-radial-{rg_num+1:02d}'
        test_items.append({
            'id': rg_id,
            'name': f'rg-radial-{rg_num+1:02d}',
            'type': 'Microsoft.Resources/subscriptions/resourceGroups'
        })
        test_dependencies.append((rg_id, '/subscriptions/sub-perf'))
        
        # Agregar recursos al RG
        for res_num in range(size):
            resource_type = resource_types[res_num % len(resource_types)]
            resource_id = f'{rg_id}/providers/{resource_type}/resource-{res_num+1:02d}'
            test_items.append({
                'id': resource_id,
                'name': f'resource-{res_num+1:02d}',
                'type': resource_type,
                'resourceGroup': f'rg-radial-{rg_num+1:02d}'
            })
            test_dependencies.append((resource_id, rg_id))
    
    print(f"\nüß™ Test de rendimiento con layout radial...")
    print(f"üìä {len(rg_sizes)} Resource Groups con {sum(rg_sizes)} recursos totales")
    print(f"üîÑ Todos los RGs usar√°n layout radial")
    
    start_time = time.time()
    
    content = generate_drawio_file(
        test_items, 
        test_dependencies, 
        embed_data=False,
        include_ids=None,
        diagram_mode='infrastructure'
    )
    
    end_time = time.time()
    execution_time = end_time - start_time
    
    assert content is not None, "No se gener√≥ contenido"
    
    output_file = 'test-radial-performance.drawio'
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    total_resources = len(test_items)
    throughput = total_resources / execution_time if execution_time > 0 else 0
    
    print(f"‚úÖ Test de rendimiento completado")
    print(f"üìÅ Archivo generado: {output_file}")
    print(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {execution_time:.3f} segundos")
    print(f"üìà Throughput: {throughput:.0f} recursos/segundo")
    print(f"üéØ Layout radial mantiene excelente rendimiento")

if __name__ == "__main__":
    try:
        test_visual_comparison()
        test_performance_radial()
        print("\nüéâ TODOS LOS TESTS DE COMPARACI√ìN Y RENDIMIENTO PASARON")
        print("\nüåü LAYOUT RADIAL IMPLEMENTADO EXITOSAMENTE")
        print("\nüìã Beneficios del layout radial:")
        print("   ‚úÖ Visualmente m√°s atractivo y balanceado")
        print("   ‚úÖ M√°s compacto que layouts lineales o de cuadr√≠cula")  
        print("   ‚úÖ Resource Group claramente identificado en el centro")
        print("   ‚úÖ Conexiones radiales m√°s cortas y claras")
        print("   ‚úÖ Distribuci√≥n angular uniforme de recursos")
        print("   ‚úÖ Escalable: radio se ajusta autom√°ticamente")
        print("   ‚úÖ Rendimiento √≥ptimo mantenido")
        print("   ‚úÖ Compatible con todos los tipos de recursos de Azure")
    except Exception as e:
        print(f"\n‚ùå ERROR en tests de comparaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        raise
